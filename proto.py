#
# Deithwen Addan yn Carn aep Morvudd
#


#


#


#
class ElementFlow:
    """
    A structure representing flows generated by element of financial essence.
    Implements data treatments, timestamps controls, 3-view flow representations on its level of detalization.

    Inheritor naming convention: EF_<here 5 literal code>_<here 2 literal version>
    """
    def __init__(self, **kwargs):
        """
        To be implemented
        """
        pass

    def source(self, **kwargs):
        """
        Loads all series needed for calculations. Follows conventions defined under __init__

        To be implemented
        """

    def ds(self, **kwargs):
        """
        Calculates "per share" flow (differential)

        To be implemented
        """
        return

    def dq(self, **kwargs):
        """
        Calculates "per quantity" flow (differential)

        To be implemented
        """
        return

    def dc(self, **kwargs):
        """
        Calculates "per capital" flow (cumulative)

        To be implemented
        """
        return


class Closer:
    """
    Inheritor naming convention: CS_<here 5 literal code>_<here 2 literal version>
    """
    def __init__(self, **kwargs):
        """
        To be implemented
        """
        pass

    def resolve(self, flow):
        """
        Finds trade resolution for given flow

        To be implemented
        """
        pass


class FinanceFlow:
    """
    Inheritor naming convention: FF_<here 5 literal code>_<here 2 literal version>
    """
    def __init__(self, **kwargs):
        """
        To be implemented
        """
        pass

    @property
    def n(self):
        """
        Represents joint n for subelements as complex

        To be implemented
        """
        return

    @property
    def representative(self):
        """
        Representative time series

        To be implemented; it is possible to set not realized
        """
        return

    def long_flow(self, start, end):
        """
        Joint per capital flow for "long" position

        To be implemented
        """
        pass

    def short_flow(self, start, end):
        """
        Joint per capital flow for "short" position

        To be implemented
        """
        pass


class Essence:
    """
    Inheritor naming convention: ES_<here 5 literal code>_<here 2 literal version>
    """
    def __init__(self, source, closer):
        self.source = source
        self.closer = closer

    @property
    def n(self):
        return self.source.n

    @property
    def solder(self):
        return self.source.solder

    def long_flow(self, start, end):
        return self.source.long_flow(start=start, end=end)

    def short_flow(self, start, end):
        return self.source.short_flow(start=start, end=end)

    def long_result(self, start, end):
        return self.closer.resolve(self.long_flow(start=start, end=end))

    def short_result(self, start, end):
        return self.closer.resolve(self.short_flow(start=start, end=end))


class Store:
    def __init__(self, essences):
        self.essences = essences
    # def __getattr__(self, item):
    #     ...

    def __getitem__(self, item):
        return self.essences[item]
